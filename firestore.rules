rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- MeghaMart Shopping App & Manager ---

    // Products - anyone can read, only authenticated users can write
    match /products/{productId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Categories - same rule as products
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Banners - anyone can read, only authenticated can write
    match /banners/{bannerId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // SubCategories - only authenticated users
    match /subCategories/{subCategoryId} {
      allow read, write: if request.auth != null;
    }

    // Missing SKUs - authenticated users only
    match /missingSkus/{skuId} {
      allow read, write: if request.auth != null;
    }

    // Sales & Purchases - only authenticated users
    match /salesHistory/{saleId} {
      allow read, write: if request.auth != null;
    }

    match /purchaseHistory/{purchaseId} {
      allow read, write: if request.auth != null;
    }

    // Orders - admins and delivery staff have special update access
    match /orders/{orderId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        exists(/databases/$(database)/documents/Admins/$(request.auth.uid)) ||
        exists(/databases/$(database)/documents/DeliveryStaff/$(request.auth.uid))
      );

      allow update: if request.auth != null && (
        // Case 1: User is cancelling their own order
        (
          resource.data.userId == request.auth.uid &&
          request.resource.data.status == 'Cancelled' &&
          (resource.data.status == 'Pending' || resource.data.status == 'Confirmed') &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])
        ) ||
        // Case 2: An Admin or Delivery Staff is updating the status
        (
          (
            exists(/databases/$(database)/documents/Admins/$(request.auth.uid)) ||
            exists(/databases/$(database)/documents/DeliveryStaff/$(request.auth.uid))
          ) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])
        )
      );
    }
    
    // Users collection - users can only manage their own profile
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // Counters - authenticated users can read and write
    match /counters/{counterId} {
      allow read, write: if request.auth != null;
    }

    // --- SMMDB App (Admin-Only Sections) ---

    // Update Logs - only authenticated users (admin/staff)
    match /updateLogs/{logId} {
      allow read, write: if request.auth != null;
    }

    // Pending Updates - only authenticated users (admin/staff)
    match /pendingUpdates/{updateId} {
      allow read, write: if request.auth != null;
    }

    // Admins - Only admins can read this collection
    match /Admins/{userId} {
      allow read: if exists(/databases/$(database)/documents/Admins/$(request.auth.uid));
      allow write: if false; // Disallow writing from client
    }
    
    // DeliveryStaff - Admins can read, no client writes
    match /DeliveryStaff/{userId} {
       allow read: if exists(/databases/$(database)/documents/Admins/$(request.auth.uid));
       allow write: if false; // Disallow writing from client
    }
  }
}
