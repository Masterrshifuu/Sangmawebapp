'use client';

import { db } from "@/lib/firebase";
import { doc, serverTimestamp, runTransaction, updateDoc } from "firebase/firestore";
import type { Order, OrderStatus } from "@/lib/types";

// This type omits fields that will be generated by the server or are not part of the initial creation data.
type OrderCreationData = Omit<Order, 'id' | 'createdAt' | 'status'>;

export async function createOrder(orderData: OrderCreationData): Promise<string> {
  try {
    const newOrderId = await runTransaction(db, async (transaction) => {
      const counterRef = doc(db, "counters", "orders");
      const counterDoc = await transaction.get(counterRef);

      let newOrderNumber = 1;
      if (counterDoc.exists()) {
        newOrderNumber = counterDoc.data().currentNumber + 1;
      }

      const displayId = `SMM${String(newOrderNumber).padStart(6, '0')}`;

      // Update the counter document
      transaction.set(counterRef, { currentNumber: newOrderNumber }, { merge: true });

      // Create the new order document with the custom ID
      const newOrderRef = doc(db, "orders", displayId);
      const orderWithTimestamp = {
        ...orderData,
        status: 'Pending', // Default status for a new order
        createdAt: serverTimestamp(),
      };
      transaction.set(newOrderRef, orderWithTimestamp);
      
      return displayId;
    });

    return newOrderId;
  } catch (error: any) {
    console.error("Error creating order: ", error);
    // Throw a more specific error to be handled by the calling function
    throw new Error("There was an error placing your order. Please try again.");
  }
}

/**
 * Updates the status of an existing order.
 * @param orderId The ID of the order to update.
 * @param status The new status for the order.
 */
export async function updateOrderStatus(orderId: string, status: OrderStatus): Promise<void> {
  const orderRef = doc(db, "orders", orderId);
  try {
    await updateDoc(orderRef, { status });
  } catch (error) {
    console.error("Error updating order status:", error);
    throw new Error("Could not update the order status.");
  }
}
